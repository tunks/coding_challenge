require 'openssl'
require 'base64'
require 'uri'

#Simple captcha module
module SimpleCaptcha
    #helper module containing common utility methods which can be use in several classes and senarios
    module CaptchaHelper
      #returns an array of unique words --words appearing only once 
      def exclude_words(text)
         text_array = text.downcase.gsub(/(\W+\z)/, '').split(/\s+|[!,.:;]+\s+/) 
         #determine if the text in the array are all unique then return an empty list
         return [] if text_array.nil? or text_array.empty? or text_array.uniq.size.eql?(1) or text_array.eql?(text_array.uniq)
         #else continue and randomly select words
         text_array.uniq.sample(rand(1..text_array.uniq.length/2))
      end
      
      #returns hash message authentication code  
      def generate_hash(text) 
           $SECRET_KEY = "1A545FFS/24KJV9kMCQ01LNL/D19WD20" #secret key --should only be known by the server
           digest  = OpenSSL::Digest::new('sha256')
           URI.escape(Base64.encode64(OpenSSL::HMAC.digest(digest, $SECRET_KEY, text)))
      end 
      
      #return an hash of words 
      def count_words(text, exclude = [])
          count = {}
          text_array = text.downcase.gsub(/(\W+\z)/, '').split(/\s+|[!,.:;]+\s+/)
          text_array.each do |txt|
             next if (txt.nil? or txt.empty?) or exclude.include?(txt)
             count[txt.to_s] =  0 if count[txt.to_s].nil? 
             count[txt.to_s] = count[txt.to_s] + 1
          end
          count
      end
    end
    
    #class that loads or retrieves data from different data source
    class DataSource
          #class methods to get data from different data sources   
          class << self
            #return content from files
            def  from_file(filenames = nil)
                 filenames ||= %w(texts/0 texts/1 texts/2 texts/3 texts/4 texts/5)
                 text_file = filenames.is_a?(Array)? filenames.sample : filenames
                 File.read(text_file).strip
            end
          end
    end 
    
    #The main captcha context class that delegates different captcha instance
    class Captcha
          def initialize(captcha)
              @captcha = captcha
          end

          def generate(data)
              @captcha.generate(data)
          end

          def validate(data)
              @captcha.validate(data)
          end
    end

    #Many different captcha types could be added
    #The interface methods are the generate and the validate method 
    #1. WordCount captcha 
    class WordCount
          def generate(data)
              exclude = exclude_words(data)
              {
               :text => data, 
               :exclude => exclude,
               :token => generate_hash(data + exclude.join) #generate  a token using the data and the exclude words
              }
          end
          
          #validate the captcha data
          #validate the token from the data by comparing it with the token generated by the server
          #combination of text,exclude to generate token 
          def validate(data)      
               begin
                  exclude = data[:exclude] || []
                  if generate_hash(data[:text]  + exclude.join).eql?(data[:token])
                     #compare the word count from the data with server's word count
                     return data[:word_count].inject({}){ |hash, (k, v)| hash.merge( k => v.to_i )}== count_words(data[:text], exclude)
                  else
                     return false
                  end
               rescue
                   return false
               end
          end
          
          include CaptchaHelper
    end 
    
    class << self
        #this class method will return an instance of a captacha object  by specifying the name
        #params -- name of the captcha to be used
        #eg 1. SimpleCaptcha.get_captcha(:word_count),  
        #   2. SimpleCaptcha.get_captcha("word_count") 
        def get_captcha(name)
            case name.to_sym
              when :word_count
                  WordCount.new
            end
        end
    end
end